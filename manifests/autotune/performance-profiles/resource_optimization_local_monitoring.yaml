apiVersion: "recommender.com/v1"
kind: "KruizePerformanceProfile"
metadata:
  name: "resource-optimization-local-monitoring"
profile_version: 1.0
k8s_type: openshift

slo:
  slo_class: "resource_usage"
  direction: "minimize"

  # Refer to src/.../performanceProfiles/PerformanceProfileInterface/RemoteMonitoringOpenShiftImpl.java
  objective_function:
    function_type: source

  function_variables:
    # CPU Request
    # Show cpu requests in cores for a container in a deployment
    - name: cpuRequest
      datasource: prometheus
      value_type: "double"
      kubernetes_object: "container"

      aggregation_functions:
        - function: 'avg'
          query: 'avg by(container,namespace,workload,workload_type,owner_kind) ((kube_pod_container_resource_requests{container!="", container!="POD", pod!="", resource="cpu", unit="core", container="$CONTAINER_NAME$", namespace="$NAMESPACE$"} * on(pod, namespace) group_left max by (container,pod, namespace) (kube_pod_status_phase{phase="Running"}) * on(pod) group_left(workload, workload_type) max by (pod, workload, workload_type) (max_over_time(namespace_workload_pod:kube_pod_owner:relabel{pod!="",workload="$WORKLOAD$", workload_type="$WORKLOAD_TYPE$"}[15m])) * on(pod) group_left(owner_kind) max by (pod, owner_kind) (max_over_time(kube_pod_owner{pod!=""}[15m]))))'

        # Show sum of cpu requests in bytes for a container in a deployment
        - function: 'sum'
          query: 'sum by(container,namespace,workload,workload_type,owner_kind) ((kube_pod_container_resource_requests{container!="", container!="POD", pod!="", resource="cpu", unit="core", container="$CONTAINER_NAME$", namespace="$NAMESPACE$"} * on(pod, namespace) group_left max by (container,pod, namespace) (kube_pod_status_phase{phase="Running"}) * on(pod) group_left(workload, workload_type) max by (pod, workload, workload_type) (max_over_time(namespace_workload_pod:kube_pod_owner:relabel{pod!="",workload="$WORKLOAD$", workload_type="$WORKLOAD_TYPE$"}[15m])) * on(pod) group_left(owner_kind) max by (pod, owner_kind) (max_over_time(kube_pod_owner{pod!=""}[15m]))))'


    # CPU Limit
    # Show cpu limits in bytes for a container in a deployment
    - name: cpuLimit
      datasource: prometheus
      value_type: "double"
      kubernetes_object: "container"

      aggregation_functions:
        - function: avg
          query: 'avg by(container,namespace,workload,workload_type,owner_kind) ((kube_pod_container_resource_limits{container!="", container!="POD", pod!="", resource="cpu", unit="core", container="$CONTAINER_NAME$", namespace="$NAMESPACE$"} * on(pod, namespace) group_left max by (container,pod, namespace) (kube_pod_status_phase{phase="Running"}) * on(pod) group_left(workload, workload_type) max by (pod, workload, workload_type) (max_over_time(namespace_workload_pod:kube_pod_owner:relabel{pod!="",workload="$WORKLOAD$", workload_type="$WORKLOAD_TYPE$"}[15m])) * on(pod) group_left(owner_kind) max by (pod, owner_kind) (max_over_time(kube_pod_owner{pod!=""}[15m]))))'

        # Show sum of cpu limits in bytes for a container in a deployment
        - function: sum
          query: 'sum by(container,namespace,workload,workload_type,owner_kind) ((kube_pod_container_resource_limits{container!="", container!="POD", pod!="", resource="cpu", unit="core", container="$CONTAINER_NAME$", namespace="$NAMESPACE$"} * on(pod, namespace) group_left max by (container,pod, namespace) (kube_pod_status_phase{phase="Running"}) * on(pod) group_left(workload, workload_type) max by (pod, workload, workload_type) (max_over_time(namespace_workload_pod:kube_pod_owner:relabel{pod!="",workload="$WORKLOAD$", workload_type="$WORKLOAD_TYPE$"}[15m])) * on(pod) group_left(owner_kind) max by (pod, owner_kind) (max_over_time(kube_pod_owner{pod!=""}[15m]))))'


    # CPU Usage
    # CPU Usage query uses recording rule to get the data. Recording rule has changed
    # between openshift 4.8 and 4.9 versions. Until openshift v4.8, cpu usage recording
    # rule used "rate" function and from openshift v4.9, it is using "irate". As the
    # metric name was also changed from
    # "node_namespace_pod_container:container_cpu_usage_seconds_total:sum_rate" to
    # "node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate",
    # mentioning both the queries below as we need to use one of them based on the
    # openshift version.

    # Average CPU per container in a deployment
    - name: cpuUsage
      datasource: prometheus
      value_type: "double"
      kubernetes_object: "container"

      # For openshift versions <=4.8
      aggregation_functions:
        - function: avg
          query: 'avg by(namespace,container,workload,workload_type,owner_kind) (avg_over_time(((irate(container_cpu_usage_seconds_total{container!="", container!="POD", pod!="", container="$CONTAINER_NAME$", namespace="$NAMESPACE$"}[5m])) * on(pod) group_left(workload, workload_type) max by (pod, workload, workload_type) (max_over_time(namespace_workload_pod:kube_pod_owner:relabel{pod!="", workload="$WORKLOAD$", workload_type="$WORKLOAD_TYPE$"}[15m])) * on(pod) group_left(owner_kind) max by (pod, owner_kind) (max_over_time(kube_pod_owner{pod!=""}[15m])))[15m:]))'
          versions: "<=4.8"

        # For openshift versions >=4.9
        - function: avg
          query: 'avg by(namespace,container,workload,workload_type,owner_kind) (avg_over_time(((node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate{container!="", container!="POD", pod!="",container="$CONTAINER_NAME$", namespace="$NAMESPACE$"}) * on(pod) group_left(workload, workload_type) max by (pod, workload, workload_type) (max_over_time(namespace_workload_pod:kube_pod_owner:relabel{pod!="",workload="$WORKLOAD$", workload_type="$WORKLOAD_TYPE$"}[15m])) * on(pod) group_left(owner_kind) max by (pod, owner_kind) (max_over_time(kube_pod_owner{pod!=""}[15m])))[15m:]))'
          versions: ">4.9"

        # Approx minimum CPU per container in a deployment
        # For openshift versions <=4.8
        - function: min
          query: 'min by(namespace,container,workload,workload_type,owner_kind) (min_over_time(((irate(container_cpu_usage_seconds_total{container!="", container!="POD", pod!="", container="$CONTAINER_NAME$", namespace="$NAMESPACE$"}[5m])) * on(pod) group_left(workload, workload_type) max by (pod, workload, workload_type) (max_over_time(namespace_workload_pod:kube_pod_owner:relabel{pod!="", workload="$WORKLOAD$", workload_type="$WORKLOAD_TYPE$"}[15m])) * on(pod) group_left(owner_kind) max by (pod, owner_kind) (max_over_time(kube_pod_owner{pod!=""}[15m])))[15m:]))'
          versions: "<=4.8"

        # For openshift versions >=4.9
        - function: min
          query: 'min by(namespace,container,workload,workload_type,owner_kind) (min_over_time(((node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate{container!="", container!="POD", pod!="",container="$CONTAINER_NAME$", namespace="$NAMESPACE$"}) * on(pod) group_left(workload, workload_type) max by (pod, workload, workload_type) (max_over_time(namespace_workload_pod:kube_pod_owner:relabel{pod!="",workload="$WORKLOAD$", workload_type="$WORKLOAD_TYPE$"}[15m])) * on(pod) group_left(owner_kind) max by (pod, owner_kind) (max_over_time(kube_pod_owner{pod!=""}[15m])))[15m:]))'
          versions: ">4.9"

        # Approx maximum CPU per container in a deployment
        # For openshift versions <=4.8
        - function: max
          query: 'max by(namespace,container,workload,workload_type,owner_kind) (max_over_time(((irate(container_cpu_usage_seconds_total{container!="", container!="POD", pod!="", container="$CONTAINER_NAME$", namespace="$NAMESPACE$"}[5m])) * on(pod) group_left(workload, workload_type) max by (pod, workload, workload_type) (max_over_time(namespace_workload_pod:kube_pod_owner:relabel{pod!="", workload="$WORKLOAD$", workload_type="$WORKLOAD_TYPE$}[15m])) * on(pod) group_left(owner_kind) max by (pod, owner_kind) (max_over_time(kube_pod_owner{pod!=""}[15m])))[15m:]))'
          versions: "<=4.8"

        # For openshift versions >=4.9
        - function: max
          query: 'max by(namespace,container,workload,workload_type,owner_kind) (max_over_time(((node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate{container!="", container!="POD", pod!="",container="$CONTAINER_NAME$", namespace="$NAMESPACE$"}) * on(pod) group_left(workload, workload_type) max by (pod, workload, workload_type) (max_over_time(namespace_workload_pod:kube_pod_owner:relabel{pod!="",workload="$WORKLOAD$", workload_type="$WORKLOAD_TYPE$"}[15m])) * on(pod) group_left(owner_kind) max by (pod, owner_kind) (max_over_time(kube_pod_owner{pod!=""}[15m])))[15m:]))'
          versions: ">4.9"

        # Sum of CPU usage for a container in all pods of a deployment
        # For openshift versions <=4.8
        - function: sum
          query: 'sum by(namespace,container,workload,workload_type,owner_kind) (avg_over_time(((irate(container_cpu_usage_seconds_total{container!="", container!="POD", pod!="", container="$CONTAINER_NAME$", namespace="$NAMESPACE$"}[5m])) * on(pod) group_left(workload, workload_type) max by (pod, workload, workload_type) (max_over_time(namespace_workload_pod:kube_pod_owner:relabel{pod!="", workload="$WORKLOAD$", workload_type="$WORKLOAD_TYPE$}[15m])) * on(pod) group_left(owner_kind) max by (pod, owner_kind) (max_over_time(kube_pod_owner{pod!=""}[15m])))[15m:]))'
          versions: "<=4.8"

        # For openshift versions >=4.9
        - function: sum
          query: 'sum by(namespace,container,workload,workload_type,owner_kind) (avg_over_time(((node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate{container!="", container!="POD", pod!="",container="$CONTAINER_NAME$", namespace="$NAMESPACE$"}) * on(pod) group_left(workload, workload_type) max by (pod, workload, workload_type) (max_over_time(namespace_workload_pod:kube_pod_owner:relabel{pod!="",workload="$WORKLOAD$", workload_type="$WORKLOAD_TYPE$"}[15m])) * on(pod) group_left(owner_kind) max by (pod, owner_kind) (max_over_time(kube_pod_owner{pod!=""}[15m])))[15m:]))'
          versions: ">4.9"


    # CPU Throttling
    - name: cpuThrottle
      datasource: prometheus
      value_type: "double"
      kubernetes_object: "container"

      aggregation_functions:
        # Average CPU throttling per container in a deployment
        - function: avg
          query: 'avg by(namespace,container,workload,workload_type,owner_kind) (avg_over_time((rate(container_cpu_cfs_throttled_seconds_total{container!="", container!="POD", pod!="",container="$CONTAINER_NAME$", namespace="$NAMESPACE$"}[15m]) * on(pod) group_left(workload, workload_type) max by (pod, workload, workload_type) (max_over_time(namespace_workload_pod:kube_pod_owner:relabel{pod!="",workload="$WORKLOAD$", workload_type="$WORKLOAD_TYPE$"}[15m])) * on(pod) group_left(owner_kind) max by (pod, owner_kind) (max_over_time(kube_pod_owner{pod!=""}[15m])))[15m:]))'

        # Maximum CPU throttling per container in a deployment
        - function: max
          query: 'max by(namespace,container,workload,workload_type,owner_kind) (max_over_time((rate(container_cpu_cfs_throttled_seconds_total{container!="", container!="POD", pod!="",container="$CONTAINER_NAME$", namespace="$NAMESPACE$"}[15m]) * on(pod) group_left(workload, workload_type) max by (pod, workload, workload_type) (max_over_time(namespace_workload_pod:kube_pod_owner:relabel{pod!="",workload="$WORKLOAD$", workload_type="$WORKLOAD_TYPE$"}[15m])) * on(pod) group_left(owner_kind) max by (pod, owner_kind) (max_over_time(kube_pod_owner{pod!=""}[15m])))[15m:]))'

        # Min of CPU throttling for a container in all pods of a deployment
        - function: min
          query: 'min by(namespace,container,workload,workload_type,owner_kind) (min_over_time((rate(container_cpu_cfs_throttled_seconds_total{container!="", container!="POD", pod!="",container="$CONTAINER_NAME$", namespace="$NAMESPACE$"}[15m]) * on(pod) group_left(workload, workload_type) max by (pod, workload, workload_type) (max_over_time(namespace_workload_pod:kube_pod_owner:relabel{pod!="",workload="$WORKLOAD$", workload_type="$WORKLOAD_TYPE$"}[15m])) * on(pod) group_left(owner_kind) max by (pod, owner_kind) (max_over_time(kube_pod_owner{pod!=""}[15m])))[15m:]))'

        # Sum of CPU throttling for a container in all pods of a deployment
        - function: sum
          query: 'sum by(namespace,container,workload,workload_type,owner_kind) (avg_over_time((rate(container_cpu_cfs_throttled_seconds_total{container!="", container!="POD", pod!="",container="$CONTAINER_NAME$", namespace="$NAMESPACE$"}[15m]) * on(pod) group_left(workload, workload_type) max by (pod, workload, workload_type) (max_over_time(namespace_workload_pod:kube_pod_owner:relabel{pod!="",workload="$WORKLOAD$", workload_type="$WORKLOAD_TYPE$"}[15m])) * on(pod) group_left(owner_kind) max by (pod, owner_kind) (max_over_time(kube_pod_owner{pod!=""}[15m])))[15m:]))'




    ######################

    # Memory Request
    # Show memory requests in bytes for a container in a deployment
    - name: memoryRequest
      datasource: prometheus
      value_type: "double"
      kubernetes_object: "container"

      aggregation_functions:
        - function: avg
          query: 'avg by(container,namespace,workload,workload_type,owner_kind) ((kube_pod_container_resource_requests{container!="", container!="POD", pod!="", resource="memory", unit="byte", container="$CONTAINER_NAME$", namespace="$NAMESPACE$"} * on(pod, namespace) group_left max by (container,pod, namespace) (kube_pod_status_phase{phase="Running"}) * on(pod) group_left(workload, workload_type) max by (pod, workload, workload_type) (max_over_time(namespace_workload_pod:kube_pod_owner:relabel{pod!="",workload="$WORKLOAD$", workload_type="$WORKLOAD_TYPE$"}[15m])) * on(pod) group_left(owner_kind) max by (pod, owner_kind) (max_over_time(kube_pod_owner{pod!=""}[15m]))))'

        # Show sum of memory requests in bytes for a container in a deployment
        - function: sum
          query: 'sum by(container,namespace,workload,workload_type,owner_kind) ((kube_pod_container_resource_requests{container!="", container!="POD", pod!="", resource="memory", unit="byte", container="$CONTAINER_NAME$", namespace="$NAMESPACE$"} * on(pod, namespace) group_left max by (container,pod, namespace) (kube_pod_status_phase{phase="Running"}) * on(pod) group_left(workload, workload_type) max by (pod, workload, workload_type) (max_over_time(namespace_workload_pod:kube_pod_owner:relabel{pod!="",workload="$WORKLOAD$", workload_type="$WORKLOAD_TYPE$"}[15m])) * on(pod) group_left(owner_kind) max by (pod, owner_kind) (max_over_time(kube_pod_owner{pod!=""}[15m]))))'


    # Memory Limit
    # Show memory limits in bytes for a container in a deployment
    - name: memoryLimit
      datasource: prometheus
      value_type: "double"
      kubernetes_object: "container"

      aggregation_functions:
        - function: avg
          query: 'avg by(container,namespace,workload,workload_type,owner_kind) ((kube_pod_container_resource_limits{container!="", container!="POD", pod!="", resource="memory", unit="byte", container="$CONTAINER_NAME$", namespace="$NAMESPACE$"} * on(pod, namespace) group_left max by (container,pod, namespace) (kube_pod_status_phase{phase="Running"}) * on(pod) group_left(workload, workload_type) max by (pod, workload, workload_type) (max_over_time(namespace_workload_pod:kube_pod_owner:relabel{pod!="",workload="$WORKLOAD$", workload_type="$WORKLOAD_TYPE$"}[15m])) * on(pod) group_left(owner_kind) max by (pod, owner_kind) (max_over_time(kube_pod_owner{pod!=""}[15m]))))'

        # Show sum of memory limits in bytes for a container in a deployment
        - function: sum
          query: 'sum by(container,namespace,workload,workload_type,owner_kind) ((kube_pod_container_resource_limits{container!="", container!="POD", pod!="", resource="memory", unit="byte", container="$CONTAINER_NAME$", namespace="$NAMESPACE$"} * on(pod, namespace) group_left max by (container,pod, namespace) (kube_pod_status_phase{phase="Running"}) * on(pod) group_left(workload, workload_type) max by (pod, workload, workload_type) (max_over_time(namespace_workload_pod:kube_pod_owner:relabel{pod!="",workload="$WORKLOAD$", workload_type="$WORKLOAD_TYPE$"}[15m])) * on(pod) group_left(owner_kind) max by (pod, owner_kind) (max_over_time(kube_pod_owner{pod!=""}[15m]))))'


    # Memory Usage
    # Average memory per container in a deployment
    - name: memoryUsage
      datasource: prometheus
      value_type: "double"
      kubernetes_object: "container"

      aggregation_functions:
        - function: avg
          query: 'avg by(namespace,container,workload,workload_type,owner_kind) (avg_over_time((container_memory_working_set_bytes{container!="", container!="POD", pod!="", container="$CONTAINER_NAME$", namespace="$NAMESPACE$"} * on(pod) group_left(workload, workload_type) max by (pod, workload, workload_type) (max_over_time(namespace_workload_pod:kube_pod_owner:relabel{pod!="",workload="$WORKLOAD$", workload_type="$WORKLOAD_TYPE$"}[15m])) * on(pod) group_left(owner_kind) max by (pod, owner_kind) (max_over_time(kube_pod_owner{pod!=""}[15m])))[15m:]))'

        # Approx minimum memory per container in a deployment
        - function: min
          query: 'min by(namespace,container,workload,workload_type,owner_kind) (min_over_time((container_memory_working_set_bytes{container!="", container!="POD", pod!="", container="$CONTAINER_NAME$", namespace="$NAMESPACE$"} * on(pod) group_left(workload, workload_type) max by (pod, workload, workload_type) (max_over_time(namespace_workload_pod:kube_pod_owner:relabel{pod!="",workload="$WORKLOAD$", workload_type="$WORKLOAD_TYPE$"}[15m])) * on(pod) group_left(owner_kind) max by (pod, owner_kind) (max_over_time(kube_pod_owner{pod!=""}[15m])))[15m:]))'

        # Approx maximum memory per container in a deployment
        - function: max
          query: 'max by(namespace,container,workload,workload_type,owner_kind) (max_over_time((container_memory_working_set_bytes{container!="", container!="POD", pod!="", container="$CONTAINER_NAME$", namespace="$NAMESPACE$"} * on(pod) group_left(workload, workload_type) max by (pod, workload, workload_type) (max_over_time(namespace_workload_pod:kube_pod_owner:relabel{pod!="",workload="$WORKLOAD$", workload_type="$WORKLOAD_TYPE$"}[15m])) * on(pod) group_left(owner_kind) max by (pod, owner_kind) (max_over_time(kube_pod_owner{pod!=""}[15m])))[15m:]))'

        # Sum of memory usage for a contianer in all pods of a deployment
        - function: sum
          query: 'sum by(namespace,container,workload,workload_type,owner_kind) (avg_over_time((container_memory_working_set_bytes{container!="", container!="POD", pod!="", container="$CONTAINER_NAME$", namespace="$NAMESPACE$"} * on(pod) group_left(workload, workload_type) max by (pod, workload, workload_type) (max_over_time(namespace_workload_pod:kube_pod_owner:relabel{pod!="",workload="$WORKLOAD$", workload_type="$WORKLOAD_TYPE$"}[15m])) * on(pod) group_left(owner_kind) max by (pod, owner_kind) (max_over_time(kube_pod_owner{pod!=""}[15m])))[15m:]))'


    # 2.4 Memory RSS
    - name: memoryRSS
      datasource: prometheus
      value_type: "double"
      kubernetes_object: "container"

      aggregation_functions:
        # Average memory RSS per container in a deployment
        - function: avg
          query: 'avg by(namespace,container,workload,workload_type,owner_kind) (avg_over_time((container_memory_rss{container!="", container!="POD", pod!="", container="$CONTAINER_NAME$", namespace="$NAMESPACE$"} * on(pod) group_left(workload, workload_type) max by (pod, workload, workload_type) (max_over_time(namespace_workload_pod:kube_pod_owner:relabel{pod!="",workload="$WORKLOAD$", workload_type="$WORKLOAD_TYPE$"}[15m])) * on(pod) group_left(owner_kind) max by (pod, owner_kind) (max_over_time(kube_pod_owner{pod!=""}[15m])))[15m:]))'

        # Approx minimum memory RSS per container in a deployment
        - function: min
          query: 'min by(namespace,container,workload,workload_type,owner_kind) (min_over_time((container_memory_rss{container!="", container!="POD", pod!="", container="$CONTAINER_NAME$", namespace="$NAMESPACE$"} * on(pod) group_left(workload, workload_type) max by (pod, workload, workload_type) (max_over_time(namespace_workload_pod:kube_pod_owner:relabel{pod!="",workload="$WORKLOAD$", workload_type="$WORKLOAD_TYPE$"}[15m])) * on(pod) group_left(owner_kind) max by (pod, owner_kind) (max_over_time(kube_pod_owner{pod!=""}[15m])))[15m:]))'


        # Approx maximum memory RSS per container in a deployment
        - function: max
          query: 'max by(namespace,container,workload,workload_type,owner_kind) (max_over_time((container_memory_rss{container!="", container!="POD", pod!="", container="$CONTAINER_NAME$", namespace="$NAMESPACE$"} * on(pod) group_left(workload, workload_type) max by (pod, workload, workload_type) (max_over_time(namespace_workload_pod:kube_pod_owner:relabel{pod!="",workload="$WORKLOAD$", workload_type="$WORKLOAD_TYPE$"}[15m])) * on(pod) group_left(owner_kind) max by (pod, owner_kind) (max_over_time(kube_pod_owner{pod!=""}[15m])))[15m:]))'

        # Sum of memory RSS for a contianer in all pods of a deployment
        - function: sum
          query: 'sum by(namespace,container,workload,workload_type,owner_kind) (avg_over_time((container_memory_rss{container!="", container!="POD", pod!="", container="$CONTAINER_NAME$", namespace="$NAMESPACE$"} * on(pod) group_left(workload, workload_type) max by (pod, workload, workload_type) (max_over_time(namespace_workload_pod:kube_pod_owner:relabel{pod!="",workload="$WORKLOAD$", workload_type="$WORKLOAD_TYPE$"}[15m])) * on(pod) group_left(owner_kind) max by (pod, owner_kind) (max_over_time(kube_pod_owner{pod!=""}[15m])))[15m:]))'

    # Container Last Active Timestamp
    - name: maxDate
      datasource: prometheus
      value_type: "double"
      kubernetes_object: "container"

      aggregation_functions:
        - function: max
          query: 'max by(namespace,container,workload,workload_type,owner_kind) (last_over_time((timestamp(container_cpu_usage_seconds_total{container!="", container!="POD", pod!="", namespace="$NAMESPACE$",container="$CONTAINER_NAME$"} > 0))[15d:]) * on(pod) group_left(workload, workload_type) max by (pod, workload, workload_type) (max_over_time(namespace_workload_pod:kube_pod_owner:relabel{pod!='',workload="$WORKLOAD$", workload_type="$WORKLOAD_TYPE$"}[15d])) * on(pod) group_left(owner_kind) max by (pod, owner_kind) (max_over_time(kube_pod_owner{pod!=""}[15d])))'


    ## namespace related queries
    - name: namespaceCpuRequest
      datasource: prometheus
      value_type: "double"
      kubernetes_object: "namespace"
      aggregation_functions:
        - function: sum
          query: 'sum(kube_resourcequota{namespace="$NAMESPACE$", resource="requests.cpu", type="hard"})'

    - name: namespaceCpuLimit
      datasource: prometheus
      value_type: "double"
      kubernetes_object: "namespace"
      aggregation_functions:
        - function: sum
          query: 'sum(kube_resourcequota{namespace="$NAMESPACE$", resource="limits.cpu", type="hard"})'

    - name: namespaceMemoryRequest
      datasource: prometheus
      value_type: "double"
      kubernetes_object: "namespace"
      aggregation_functions:
        - function: sum
          query: 'sum(kube_resourcequota{namespace="$NAMESPACE$", resource="requests.memory", type="hard"})'

    - name: namespaceMemoryLimit
      datasource: prometheus
      value_type: "double"
      kubernetes_object: "namespace"
      aggregation_functions:
        - function: sum
          query: 'sum(kube_resourcequota{namespace="$NAMESPACE$", resource="limits.memory", type="hard"})'

    - name: namespaceCpuUsage
      datasource: prometheus
      value_type: "double"
      kubernetes_object: "namespace"
      aggregation_functions:
        - function: avg
          query: 'avg_over_time(sum by(namespace) (node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate{namespace="$NAMESPACE$", container!="", container!="POD", pod!=" "})[$MEASUREMENT_DURATION_IN_MIN$m:])'
        - function: max
          query: 'max_over_time(sum by(namespace) (node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate{namespace="$NAMESPACE$", container!="", container!="POD", pod!=" "})[$MEASUREMENT_DURATION_IN_MIN$m:])'
        - function: min
          query: 'min_over_time(sum by(namespace) (node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate{namespace="$NAMESPACE$", container!="", container!="POD", pod!=" "})[$MEASUREMENT_DURATION_IN_MIN$m:])'

    - name: namespaceCpuThrottle
      datasource: prometheus
      value_type: "double"
      kubernetes_object: "namespace"
      aggregation_functions:
        - function: avg
          query: 'avg_over_time(sum by(namespace) (rate(container_cpu_cfs_throttled_seconds_total{namespace="$NAMESPACE$", container!="", container!="POD", pod!=" "}[5m]))[$MEASUREMENT_DURATION_IN_MIN$m:])'
        - function: max
          query: 'max_over_time(sum by(namespace) (rate(container_cpu_cfs_throttled_seconds_total{namespace="$NAMESPACE$", container!="", container!="POD", pod!=" "}[5m]))[$MEASUREMENT_DURATION_IN_MIN$m:])'
        - function: min
          query: 'min_over_time(sum by(namespace) (rate(container_cpu_cfs_throttled_seconds_total{namespace="$NAMESPACE$", container!="", container!="POD", pod!=" "}[5m]))[$MEASUREMENT_DURATION_IN_MIN$m:])'

    - name: namespaceMemoryUsage
      datasource: prometheus
      value_type: "double"
      kubernetes_object: "namespace"
      aggregation_functions:
        - function: avg
          query: 'avg_over_time(sum by(namespace) (container_memory_working_set_bytes{namespace="$NAMESPACE$", container!="", container!="POD", pod!=" "})[$MEASUREMENT_DURATION_IN_MIN$m:])'
        - function: max
          query: 'max_over_time(sum by(namespace) (container_memory_working_set_bytes{namespace="$NAMESPACE$", container!="", container!="POD", pod!=" "})[$MEASUREMENT_DURATION_IN_MIN$m:])'
        - function: min
          query: 'min_over_time(sum by(namespace) (container_memory_working_set_bytes{namespace="$NAMESPACE$", container!="", container!="POD", pod!=" "})[$MEASUREMENT_DURATION_IN_MIN$m:])'

    - name: namespaceMemoryRSS
      datasource: prometheus
      value_type: "double"
      kubernetes_object: "namespace"
      aggregation_functions:
        - function: avg
          query: 'avg_over_time(sum by(namespace) (container_memory_rss{namespace="$NAMESPACE$", container!="", container!="POD", pod!=" "})[$MEASUREMENT_DURATION_IN_MIN$m:])'
        - function: max
          query: 'max_over_time(sum by(namespace) (container_memory_rss{namespace="$NAMESPACE$", container!="", container!="POD", pod!=" "})[$MEASUREMENT_DURATION_IN_MIN$m:])'
        - function: min
          query: 'min_over_time(sum by(namespace) (container_memory_rss{namespace="$NAMESPACE$", container!="", container!="POD", pod!=" "})[$MEASUREMENT_DURATION_IN_MIN$m:])'

    - name: namespaceTotalPods
      datasource: prometheus
      value_type: "double"
      kubernetes_object: "namespace"
      aggregation_functions:
        - function: sum
          query: 'sum(count(kube_pod_status_phase{namespace="$NAMESPACE$"}))'

    - name: namespaceRunningPods
      datasource: prometheus
      value_type: "double"
      kubernetes_object: "namespace"
      aggregation_functions:
        - function: sum
          query: 'sum(count(kube_pod_status_phase{namespace="$NAMESPACE$", phase="Running"}))'

    # GPU Core Usage
    - name: gpuCoreUsage
      datasource: prometheus
      value_type: "double"
      kubernetes_object: "container"

      aggregation_functions:
        # Average GPU Core Usage Percentage per container in a deployment
        - function: avg
          query: 'avg by (Hostname,device,modelName,UUID,exported_container,exported_namespace) (avg_over_time(DCGM_FI_DEV_GPU_UTIL{exported_namespace="$NAMESPACE$",exported_container="$CONTAINER_NAME$"}[$MEASUREMENT_DURATION_IN_MIN$m]))'

        # Maximum GPU Core Usage Percentage per container in a deployment
        - function: max
          query: 'max by (Hostname,device,modelName,UUID,exported_container,exported_namespace) (max_over_time(DCGM_FI_DEV_GPU_UTIL{exported_namespace="$NAMESPACE$",exported_container="$CONTAINER_NAME$"}[$MEASUREMENT_DURATION_IN_MIN$m]))'

        # Minimum of GPU Core Usage Percentage for a container in a deployment
        - function: min
          query: 'min by (Hostname,device,modelName,UUID,exported_container,exported_namespace) (min_over_time(DCGM_FI_DEV_GPU_UTIL{exported_namespace="$NAMESPACE$",exported_container="$CONTAINER_NAME$"}[$MEASUREMENT_DURATION_IN_MIN$m]))'
    # GPU Memory usage
    - name: gpuMemoryUsage
      datasource: prometheus
      value_type: "double"
      kubernetes_object: "container"

      aggregation_functions:
        # Average GPU Memory Usage Percentage per container in a deployment
        - function: avg
          query: 'avg by (Hostname,device,modelName,UUID,exported_container,exported_namespace) (avg_over_time(DCGM_FI_DEV_MEM_COPY_UTIL{exported_namespace="$NAMESPACE$",exported_container="$CONTAINER_NAME$"}[$MEASUREMENT_DURATION_IN_MIN$m]))'

        # Maximum GPU Memory Usage  Percentage per container in a deployment
        - function: max
          query: 'max by (Hostname,device,modelName,UUID,exported_container,exported_namespace) (max_over_time(DCGM_FI_DEV_MEM_COPY_UTIL{exported_namespace="$NAMESPACE$",exported_container="$CONTAINER_NAME$"}[$MEASUREMENT_DURATION_IN_MIN$m]))'

        # Minimum of GPU Memory Usage  Percentage for a container in a deployment
        - function: min
          query: 'min by (Hostname,device,modelName,UUID,exported_container,exported_namespace) (min_over_time(DCGM_FI_DEV_MEM_COPY_UTIL{exported_namespace="$NAMESPACE$",exported_container="$CONTAINER_NAME$"}[$MEASUREMENT_DURATION_IN_MIN$m]))'
